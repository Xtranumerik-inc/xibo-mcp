/**
 * System Administration tools for Xibo MCP Server
 * Complete system management and maintenance capabilities
 * @author Xtranumerik Inc.
 */

import { ToolDefinition } from '../types.js';
import XiboClient from '../xibo-client.js';

// ========== SYSTEM INFORMATION TOOLS ==========

const systemInfo: ToolDefinition = {
  name: 'system_info',
  description: 'Get comprehensive system information and version details',
  parameters: [
    { name: 'detailed', type: 'boolean', description: 'Include detailed system stats', required: false, default: false }
  ],
  handler: async (params: any) => {
    const client: XiboClient = params._xiboClient;
    
    try {
      const systemData = await client.getSystemInfo();
      const healthData = await client.healthCheck();
      const versionData = await client.getApiVersion();
      
      let result = `üñ•Ô∏è **Informations syst√®me Xibo**\n\n`;
      
      // Basic system info
      result += `**Version et build:**\n`;
      result += `   Version CMS: ${systemData.data.version || versionData.data.version || 'N/A'}\n`;
      result += `   Version DB: ${systemData.data.dbVersion || 'N/A'}\n`;
      result += `   Version API: ${versionData.data.version || 'N/A'}\n`;
      result += `   Environnement: ${systemData.data.environment || versionData.data.environment || 'N/A'}\n\n`;
      
      // System status
      result += `**Statut du syst√®me:**\n`;
      result += `   √âtat: ${healthData.data.status || 'Unknown'}\n`;
      result += `   Biblioth√®que: ${systemData.data.libraryLocation || 'N/A'}\n`;
      result += `   Fuseau horaire: ${systemData.data.timeZone || 'N/A'}\n`;
      result += `   Th√®me: ${systemData.data.theme || 'Default'}\n\n`;
      
      // Features and licensing
      if (systemData.data.features) {
        result += `**Fonctionnalit√©s disponibles:**\n`;
        if (Array.isArray(systemData.data.features)) {
          systemData.data.features.forEach((feature: string) => {
            result += `   ‚úÖ ${feature}\n`;
          });
        } else {
          Object.keys(systemData.data.features).forEach((feature: string) => {
            result += `   ‚úÖ ${feature}: ${systemData.data.features[feature]}\n`;
          });
        }
        result += `\n`;
      }
      
      if (systemData.data.isTrial !== undefined) {
        result += `**Licence:**\n`;
        result += `   Type: ${systemData.data.isTrial ? 'Version d\\'essai' : 'Licence compl√®te'}\n`;
        if (systemData.data.productName || versionData.data.cms) {
          result += `   Produit: ${systemData.data.productName || versionData.data.cms}\n`;
        }
        result += `\n`;
      }
      
      if (params.detailed) {
        // Additional system stats
        try {
          const tasks = await client.getSystemTasks();
          result += `**T√¢ches syst√®me:**\n`;
          if (tasks.data && Array.isArray(tasks.data)) {
            result += `   T√¢ches actives: ${tasks.data.filter((t: any) => t.status === 'running').length}\n`;
            result += `   T√¢ches en attente: ${tasks.data.filter((t: any) => t.status === 'pending').length}\n`;
            result += `   Total: ${tasks.data.length}\n`;
          } else {
            result += `   Statut des t√¢ches: Disponible\n`;
          }
          result += `\n`;
        } catch (error) {
          result += `**T√¢ches syst√®me:** Non disponibles\n\n`;
        }
      }
      
      return result;
    } catch (error: any) {
      return `Erreur lors de la r√©cup√©ration des informations syst√®me: ${error.message}`;
    }
  }
};

const systemHealth: ToolDefinition = {
  name: 'system_health',
  description: 'Perform comprehensive system health check',
  parameters: [
    { name: 'includeDetails', type: 'boolean', description: 'Include detailed health diagnostics', required: false, default: false }
  ],
  handler: async (params: any) => {
    const client: XiboClient = params._xiboClient;
    
    try {
      const healthData = await client.healthCheck();
      const systemInfo = await client.getSystemInfo();
      
      let result = `üè• **V√©rification de sant√© syst√®me**\n\n`;
      
      // Overall status
      const status = healthData.data.status || 'unknown';
      const statusEmoji = status === 'healthy' ? '‚úÖ' : status === 'unhealthy' ? '‚ùå' : '‚ö†Ô∏è';
      result += `**√âtat g√©n√©ral:** ${statusEmoji} ${status.toUpperCase()}\n\n`;
      
      // Basic health metrics
      if (healthData.data.server_time) {
        result += `**Temps serveur:** ${healthData.data.server_time}\n`;
      }
      
      if (healthData.data.endpoint) {
        result += `**Point de contr√¥le:** ${healthData.data.endpoint}\n`;
      }
      
      // System connectivity
      result += `**Connectivit√©:**\n`;
      result += `   API accessible: ‚úÖ Oui\n`;
      result += `   Authentification: ‚úÖ Active\n`;
      
      if (systemInfo.data) {
        result += `   Base de donn√©es: ‚úÖ Connect√©e\n`;
        if (systemInfo.data.libraryLocation) {
          result += `   Biblioth√®que m√©dia: ‚úÖ Accessible\n`;
        }
      }
      
      result += `\n`;
      
      if (params.includeDetails) {
        // Detailed diagnostics
        result += `**Diagnostics d√©taill√©s:**\n`;
        
        try {
          // Check system tasks
          const tasks = await client.getSystemTasks();
          if (tasks.data && Array.isArray(tasks.data)) {
            const runningTasks = tasks.data.filter((t: any) => t.status === 'running').length;
            const failedTasks = tasks.data.filter((t: any) => t.status === 'failed').length;
            
            result += `   T√¢ches en cours: ${runningTasks}\n`;
            result += `   T√¢ches √©chou√©es: ${failedTasks}\n`;
          }
        } catch (error) {
          result += `   T√¢ches syst√®me: ‚ö†Ô∏è Non accessible\n`;
        }
        
        try {
          // Check maintenance mode
          const maintenance = await client.getMaintenanceStatus();
          if (maintenance.data) {
            result += `   Mode maintenance: ${maintenance.data.enabled ? 'üîß Activ√©' : '‚úÖ D√©sactiv√©'}\n`;
          }
        } catch (error) {
          result += `   Mode maintenance: ‚ö†Ô∏è Statut inconnu\n`;
        }
        
        // Authentication mode info
        const authStatus = client.getAuthStatus();
        result += `   Mode d'auth: ${authStatus.mode}\n`;
        result += `   Utilisateur connect√©: ${authStatus.userInfo?.username || 'N/A'}\n`;
      }
      
      // Health recommendations
      if (status !== 'healthy') {
        result += `\n**Recommandations:**\n`;
        if (healthData.data.error) {
          result += `   ‚ö† Erreur d√©tect√©e: ${healthData.data.error}\n`;
        }
        result += `   ‚ö† V√©rifiez les logs syst√®me pour plus de d√©tails\n`;
        result += `   ‚ö† Contactez l'administrateur si le probl√®me persiste\n`;
      }
      
      return result;
    } catch (error: any) {
      return `‚ùå **Erreur lors de la v√©rification de sant√©:** ${error.message}\n\n**Recommandations:**\n‚ö† V√©rifiez la connectivit√© r√©seau\n‚ö† Validez les param√®tres d'authentification\n‚ö† Consultez les logs pour plus de d√©tails`;
    }
  }
};

const systemVersion: ToolDefinition = {
  name: 'system_version',
  description: 'Get detailed version information for Xibo CMS and API',
  parameters: [],
  handler: async (params: any) => {
    const client: XiboClient = params._xiboClient;
    
    try {
      const versionData = await client.getApiVersion();
      const systemData = await client.getSystemInfo();
      
      let result = `üîñ **Informations de version**\n\n`;
      
      // API Version
      result += `**API Xibo:**\n`;
      result += `   Version: ${versionData.data.version || 'Unknown'}\n`;
      if (versionData.data.build) {
        result += `   Build: ${versionData.data.build}\n`;
      }
      if (versionData.data.cms) {
        result += `   CMS: ${versionData.data.cms}\n`;
      }
      if (versionData.data.environment) {
        result += `   Environnement: ${versionData.data.environment}\n`;
      }
      result += `\n`;
      
      // System Version
      if (systemData.data) {
        result += `**Syst√®me CMS:**\n`;
        if (systemData.data.version) {
          result += `   Version CMS: ${systemData.data.version}\n`;
        }
        if (systemData.data.dbVersion) {
          result += `   Version DB: ${systemData.data.dbVersion}\n`;
        }
        if (systemData.data.productName) {
          result += `   Produit: ${systemData.data.productName}\n`;
        }
        if (systemData.data.releaseNotes) {
          result += `   Notes de version: ${systemData.data.releaseNotes}\n`;
        }
        result += `\n`;
      }
      
      // MCP Server Version
      result += `**Serveur MCP Xibo:**\n`;
      result += `   Version: 2.0.0\n`;
      result += `   D√©veloppeur: Xtranumerik Inc.\n`;
      result += `   Mode d'authentification: ${client.getAuthMode()}\n`;
      
      // Compatibility info
      result += `\n**Compatibilit√©:**\n`;
      if (versionData.data.version) {
        const version = versionData.data.version;
        if (version.startsWith('4.') || version.startsWith('3.')) {
          result += `   ‚úÖ Version support√©e\n`;
          result += `   ‚úÖ Tous les outils MCP fonctionnels\n`;
        } else {
          result += `   ‚ö†Ô∏è Version non test√©e\n`;
          result += `   ‚ö†Ô∏è Certains outils peuvent ne pas fonctionner\n`;
        }
      } else {
        result += `   ‚ùì Version inconnue - compatibilit√© non v√©rifi√©e\n`;
      }
      
      return result;
    } catch (error: any) {
      return `Erreur lors de la r√©cup√©ration des informations de version: ${error.message}`;
    }
  }
};

const systemMaintenance: ToolDefinition = {
  name: 'system_maintenance',
  description: 'Manage system maintenance mode',
  parameters: [
    { name: 'action', type: 'string', description: 'Action: status, enable, disable', required: true },
    { name: 'message', type: 'string', description: 'Maintenance message (for enable action)', required: false }
  ],
  handler: async (params: any) => {
    const client: XiboClient = params._xiboClient;
    
    try {
      let result = `üîß **Gestion du mode maintenance**\n\n`;
      
      switch (params.action.toLowerCase()) {
        case 'status':
          const status = await client.getMaintenanceStatus();
          result += `**Statut actuel:**\n`;
          if (status.data) {
            result += `   Mode: ${status.data.enabled ? 'üîß Activ√©' : '‚úÖ D√©sactiv√©'}\n`;
            if (status.data.message) {
              result += `   Message: ${status.data.message}\n`;
            }
            if (status.data.enabledAt) {
              result += `   Activ√© le: ${status.data.enabledAt}\n`;
            }
          } else {
            result += `   Mode: ‚úÖ D√©sactiv√© (par d√©faut)\n`;
          }
          break;
          
        case 'enable':
          const enableResponse = await client.enableMaintenanceMode(params.message);
          result += `**Mode maintenance activ√©** üîß\n`;
          if (params.message) {
            result += `   Message: ${params.message}\n`;
          }
          result += `   Les utilisateurs verront une page de maintenance\n`;
          result += `   Seuls les administrateurs peuvent acc√©der au syst√®me\n`;
          break;
          
        case 'disable':
          const disableResponse = await client.disableMaintenanceMode();
          result += `**Mode maintenance d√©sactiv√©** ‚úÖ\n`;
          result += `   Le syst√®me est √† nouveau accessible √† tous les utilisateurs\n`;
          break;
          
        default:
          return `‚ùå Action non reconnue. Actions disponibles: status, enable, disable`;
      }
      
      return result;
    } catch (error: any) {
      return `Erreur lors de la gestion du mode maintenance: ${error.message}`;
    }
  }
};

const systemTasks: ToolDefinition = {
  name: 'system_tasks',
  description: 'View and manage system tasks',
  parameters: [
    { name: 'action', type: 'string', description: 'Action: list, run, status', required: false, default: 'list' },
    { name: 'taskName', type: 'string', description: 'Task name to run (required for run action)', required: false }
  ],
  handler: async (params: any) => {
    const client: XiboClient = params._xiboClient;
    
    try {
      let result = `‚öôÔ∏è **Gestion des t√¢ches syst√®me**\n\n`;
      
      const action = params.action || 'list';
      
      switch (action.toLowerCase()) {
        case 'list':
        case 'status':
          const tasks = await client.getSystemTasks();
          if (tasks.data && Array.isArray(tasks.data)) {
            result += `**T√¢ches syst√®me (${tasks.data.length}):**\n\n`;
            
            const tasksByStatus: any = {};
            tasks.data.forEach((task: any) => {
              const status = task.status || 'unknown';
              if (!tasksByStatus[status]) {
                tasksByStatus[status] = [];
              }
              tasksByStatus[status].push(task);
            });
            
            // Summary by status
            result += `**R√©sum√©:**\n`;
            Object.keys(tasksByStatus).forEach(status => {
              const count = tasksByStatus[status].length;
              const emoji = status === 'running' ? 'üîÑ' : status === 'completed' ? '‚úÖ' : 
                           status === 'failed' ? '‚ùå' : status === 'pending' ? '‚è≥' : '‚ùì';
              result += `   ${emoji} ${status}: ${count}\n`;
            });
            result += `\n`;
            
            // Detail for each task
            tasks.data.slice(0, 10).forEach((task: any, index: number) => {
              const statusEmoji = task.status === 'running' ? 'üîÑ' : task.status === 'completed' ? '‚úÖ' : 
                                 task.status === 'failed' ? '‚ùå' : task.status === 'pending' ? '‚è≥' : '‚ùì';
              result += `**${index + 1}. ${task.name || task.taskName || `T√¢che ${task.id}`}**\n`;
              result += `   Statut: ${statusEmoji} ${task.status || 'unknown'}\n`;
              if (task.lastRunAt) {
                result += `   Derni√®re ex√©cution: ${task.lastRunAt}\n`;
              }
              if (task.nextRunAt) {
                result += `   Prochaine ex√©cution: ${task.nextRunAt}\n`;
              }
              if (task.description) {
                result += `   Description: ${task.description}\n`;
              }
              result += `\n`;
            });
            
            if (tasks.data.length > 10) {
              result += `... et ${tasks.data.length - 10} autres t√¢ches\n`;
            }
          } else {
            result += `Aucune t√¢che syst√®me disponible ou format de r√©ponse inattendu`;
          }
          break;
          
        case 'run':
          if (!params.taskName) {
            return `‚ùå Le nom de la t√¢che est requis pour l'action 'run'`;
          }
          
          const runResponse = await client.runSystemTask(params.taskName);
          result += `**T√¢che ex√©cut√©e: ${params.taskName}** ‚úÖ\n`;
          
          if (runResponse.data) {
            result += `\n**R√©sultat:**\n`;
            if (runResponse.data.message) {
              result += `   Message: ${runResponse.data.message}\n`;
            }
            if (runResponse.data.status) {
              result += `   Statut: ${runResponse.data.status}\n`;
            }
            if (runResponse.data.output) {
              result += `   Sortie: ${runResponse.data.output}\n`;
            }
          }
          break;
          
        default:
          return `‚ùå Action non reconnue. Actions disponibles: list, run, status`;
      }
      
      return result;
    } catch (error: any) {
      return `Erreur lors de la gestion des t√¢ches syst√®me: ${error.message}`;
    }
  }
};

export const systemAdminTools: ToolDefinition[] = [
  systemInfo,
  systemHealth,
  systemVersion,
  systemMaintenance,
  systemTasks
];